= First steps - How to start your first freetz package =
== Info ==
In this howto you will find a number of examples for building packages, each with their own parameters.[[BR]]
The first part will describe the build environment, and preparing the Toolchain.[[BR]]
Than the [wiki:help/howtos/development/developer_information/package_development_start/example_1 first example package] is the [http://www.nocrew.org/software/httptunnel.html HTTP tunnel server]. This package is an easy to compile, and a good choice for your first freetz package. ''[wiki:packages/httptunnel Httptunnel]'' is already included in freetz nowadays.[[BR]][[BR]]

The [wiki:help/howtos/development/developer_information/package_development_start/example_2 second example] will show the package [http://parchive.sourceforge.net/ par2cmdline]. Par2cmdline doesnâ€™t require much additional parameters, but does require a patch.
This package require a lot of CPU and memory resources so that makes this package less interesting for inclusion into Freetz.[[BR]][[BR]]

The [wiki:help/howtos/development/developer_information/package_development_start/example_3 third example] is for package [http://nzbget.sourceforge.net/ nzbget]. NZBget needs a few additional parameters, a small patch, and a library that is already part of Freetz. Also this package requires a lot of CPU and memory resources, and maybe only useful on the most powerful Fritz!Box models. 



== Build Environment ==
There are [wiki:help/howtos/common/install different platforms] which you may use to build your package, but usually all involve Linux in some way. 
Currently Freetz-Linux looks to be the most updated choice.

Just use the latest [http://sourceforge.net/projects/freetz-linux/files/?source=navbar freetz-linux] availble. I used:
* [http://www.ip-phone-forum.de/showthread.php?t=199449&page=28 freetz-linux 1.2.1] (with xz added with:  sudo apt-get install xz-utils) [[BR]] (from [http://freetz.org/changeset/11347 revision 11347] the following is needed: sudo apt-get install libacl1-dev libattr1-dev libcap-dev) [[br]] (from revision ??? the following is also needed: sudo apt-get install imagemagick)



Very helpful information on ''make''-targets such as ''[wiki:help/howtos/common/install/menuconfig menuconfig]'', ''toolchain'', ''precompiled'', ''recover'' etc. may be retrieved in the [wiki:help/howtos HowTos] section of the Freetz wiki.

=== Toolchain ===
The toolchain is built automatically with "make" (see below).

If you want to have your toolchain ready at an earlier stage, you can create it now:[[BR]]Go to your build environment and change to your freetz directory, usually `~/freetz-trunk`.

In make menuconfig, select your hardware type (e.g. 7170), and after setting the Level of user competence to Expert you can look around in 'Toolchain options', but no changes are normally needed.

{{{
$ make menuconfig
       Level of user competence (Expert)  --->
       Hardware type (7170)  --->
       Firmware language (en - international)  --->
       Toolchain options  --->
                 No changes needed
}}}

Then create your toolchain:

{{{
$ make toolchain

(for older revisions:)
FINISHED: toolchain/kernel/ - glibc compiler for the kernel
          toolchain/target/ - uClibc compiler for the userspace
(for later revisions:)
FINISHED: new download toolchains can be found in dl/
}}}
In order to build your new package manually (without integration in the freetz build system), you should see that your toolchain is also included in the search path.


== File Structure ==

Below the file structure used in the build environment (cross-compile environment) e.g. Freetz-linux mentioned earlier.

{{{
#!html
<! Not the most readable part, but gives the desired result.>
<p>`--<FONT COLOR="0000FF">make</FONT><br>
&#160;&#160;&#160;`--<FONT COLOR="0000FF">&#60;package&#62;</FONT><br>
&#160;&#160;&#160;&#160;&#160;|-- Config.in<br>
&#160;&#160;&#160;&#160;&#160;|-- external.in<br>
&#160;&#160;&#160;&#160;&#160;|-- external.files<br>
&#160;&#160;&#160;&#160;&#160;|-- external.services<br>
&#160;&#160;&#160;&#160;&#160;|-- <FONT COLOR="0000FF">files</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;`-- .language<br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;`-- <FONT COLOR="0000FF">root</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`-- <FONT COLOR="0000FF">etc</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;`-- <FONT COLOR="0000FF">default.&#60;package&#62;</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;`--&#60;package&#62;.cfg<br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;`--<FONT COLOR="00FF00">&#60;package&#62;_conf</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;`--&#60;package&#62;.save<br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;`-- <FONT COLOR="0000FF">init.d</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`--<FONT COLOR="00FF00">rc.&#60;package&#62;</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;       `-- <FONT COLOR="0000FF">usr</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`-- <FONT COLOR="0000FF">lib</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`--<FONT COLOR="0000FF">cgi-bin</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`--<FONT COLOR="00FF00">&#60;package&#62;.cgi</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`--<FONT COLOR="0000FF">&#60;package&#62;</FONT><br>
&#160;&#160;&#160;&#160;&#160;`--<FONT COLOR="0000FF">patches</FONT><br>
&#160;&#160;&#160;&#160;&#160;|&#160;&#160;&#160;&#160;`--&#60;numbered-patch_file_name&#62;.patch<br>
&#160;&#160;&#160;&#160;&#160;`-- &#60;package&#62;.mk</p>
<! /Not the most readable part, but gives the desired result.>
<p><FONT COLOR="00FF00">Font Green = executable <br> </FONT><FONT COLOR="0000FF"> Font Blue = directory</FONT></p>
}}}

The following files are required for compiling the package, e.g. for entries in {{{make menuconfig}}} and cross-compile steps.[[br]]
The patches are optional, and only needed if the downloadable source needs some changes.[[br]]
 make/<package>/Config.in[[br]]
 make/<package>/patches/*[[br]]
 make/<package>/<package>.mk[[br]]

The following group of files are applicable if you plan to build a web-interface.[[br]]
The [wiki:help/howtos/development/developer_information/package_development_start/<package>.cfg <package>.cfg] contains the default configuration parameters.[[br]]
The [wiki:help/howtos/development/developer_information/package_development_start/<package>_conf <package>_conf] is an optional script for generating a config file if the deamon (binary) needs it.[[br]]
The [wiki:help/howtos/development/developer_information/package_development_start/rc.<package> rc.<package>] is  responsible to start/stop the deamon with the proper parameters, and having the package included in the menu of the web-interface.[[br]]
The [wiki:help/howtos/development/developer_information/package_development_start/<package>.cgi <package>.cgi] is used to create the body of the web-interface, where you can find the more HTML like statements.[[br]]
The [wiki:help/howtos/development/developer_information/package_development_start/.language .language] is used to translate the [wiki:help/howtos/development/developer_information/package_development_start/<package>.cgi <package>.cgi] web-interface to the selected language.
The file should highlight the files with {{{lang}}} statements, to translate/select the target language.[[br]]
The directory {{{usr/lib/cgi-bin/<package>/}}} is used for optional extra cgi scripts.
 make/files/root/etc/default.<package>/[wiki:help/howtos/development/developer_information/package_development_start/<package>.cfg <package>.cfg][[br]]
 make/files/root/etc/default.<package>/[wiki:help/howtos/development/developer_information/package_development_start/<package>_conf <package>_conf][[br]]
 make/files/root/etc/default.<package>/<package>.save[[br]]
 make/files/root/etc/init.d/[wiki:help/howtos/development/developer_information/package_development_start/rc.<package> rc.<package>][[br]]
 make/files/root/usr/lib/cgi-bin/[wiki:help/howtos/development/developer_information/package_development_start/<package>.cgi <package>.cgi][[br]]
 make/files/root/usr/lib/cgi-bin/<package>/*[[br]]


== Examples Binary Package ==

* [wiki:help/howtos/development/developer_information/package_development_start/example_1 Example 1 - httptunnel]
* [wiki:help/howtos/development/developer_information/package_development_start/example_2 Example 2 - par2cmdline]
* [wiki:help/howtos/development/developer_information/package_development_start/example_3 Example 3 - NZBget]


== Configuration Handling ==

The configuration is saved in the non-volatile memory (tffs) via a character device {{{/var/flash/freetz/}}}.[[br]]
This is done by saving (writing) a tar file containing all config data to this character device.[[br]]
You can test this with:[[br]]
 {{{cat /var/flash/freetz > /var/tmp/config.tar}}} [[br]]
 {{{tar tf /var/tmp/config.tar}}} [[br]]

Freetz has a number of tools for handling configuration data and â€˜saving them toâ€™ / â€™reading them fromâ€™ tffs.[[br]]
The data from the character device is taken-from / saved-to {{{/var/tmp/flash}}}.[[br]]
{{{/tmp}}} is a symbolic-link (symlink) to {{{/var/tmp}}}, so this makes {{{/tmp/flash/}}} is the same as {{{/var/tmp/flash}}}[[br]]
 {{{# ls -al /tmp}}}[[br]]
 {{{lrwxrwxrwx    1 root     root             7 Jan 12 01:56 /tmp -> var/tmp}}}

{{{/tmp/flash}}} is the location where all configuration data is gathered. A look into this directory should let you recognize the files also seen with the previous {{{tar tf}}} command.[[br]]
The default configuration file (e.g. the file you need to create for the package) is located at {{{/mod/etc/default.<package>/<package>.cfg}}}.[[br]]
This is a static file containing a pre-defined value (can be empty) for each variable (config parameter) in the following format:[[br]]
{{{
export <PACKAGE>_<VARIABLE1>=â€™<value1>â€™
export <PACKAGE>_<VARIABLE2>=â€™<value2>â€™
export <PACKAGE>_<VARIABLE3>=â€™<value3>â€™
.
.
.
export < PACKAGE>_<VARIABLEn>=â€™<valuen>â€™
}}} 
These are also the values that will be used if you revert back to the default parameters via the web-interface using the â€˜defaultâ€™ button.[[br]]
This config file is using Shell syntax which makes it possible to use the file as command lines.[[br]][[br]]
After changes are made via the web-interface, and saved with the â€˜Applyâ€™ button they are written to {{{/mod/etc/conf/<package>.cfg}}}[[br]]
This file contains all the variables, so some changed, others still default, depending on the changes made (so the actual config values).[[br]]
So the file {{{/mod/etc/conf/<package>.cfg}}} containing the actual values, and {{{/mod/etc/default.<package>/<package>.cfg}}} with the default values contain the same parameters, but not necessarily in the same order.[[br]]
Again using the Shell syntax and the variables can be exported using: {{{. /mod/etc/conf/<package>.cfg}}}[[br]][[br]]
To preserve space in the non-volatile memory (tffs) only the difference with the default parameters (/mod/etc/default.<package>/<package>.cfg) and the actual changed parameters (/mod/etc/conf/<package>.cfg) are saved to {{{/tmp/flash}}}. This can be seen from the â€˜.diffâ€™ extension e.g. {{{/tmp/flash/<package>.diff}}}.[[br]][[br]]
The main package for controlling all package config is mod. Mod contains a number of tools for handling package config:
{{{#!table style="border:none;text-align:left"
   {{{#!tr
      {{{#!td style="border: none"
      modconf load <package>[[br]]
      modconf save <package>[[br]]
      modsave[[br]]
      modsave flash
      }}}
      {{{#!td style="border: none"
      Create the data /mod/etc/conf/<package>.cfg from the default conf file /mod/etc/default.<package>/<package>.cfg and /tmp/flash/<package>.diff[[br]]
      Create the data /tmp/flash/<package>.diff from the default conf file /mod/etc/default.<package>/<package>.cfg and /mod/etc/conf/<package>.cfg[[br]]
      Initiate for each package 'modconf save' and saves the results located in â€˜/tmp/flashâ€™ to tffs (non-volatile memory)[[br]]
      Saves the content of â€˜/tmp/flash/â€™ to tffs (non-volatile memory)
      }}}
   }}}
}}}


* [wiki:help/howtos/development/developer_information/package_development_start/example_config_handling Examples explaining these commands].


== Examples Web-Interface ==

* [wiki:help/howtos/development/developer_information/package_development_start/webinterface_example_1 Example 1 - httptunnel]



== Trouble shooting ==

* If you see during `make` or `make menuconfig` only dots appear you probably started creating a new package stucture, which is still unfinished.[[BR]]Just remove the unfinshed directory.


* A failure like ''checking whether the C compiler (mipsel-linux-gcc -O2 -Wall -fomit-frame-pointer ) works... no''[[BR]]''configure: error: installation or configuration problem: C compiler cannot create executables.'' most likely point to a wrong PATH environment setting. [[BR]]Use `echo $PATH` for trouble shooting.[[BR]]This can be expected if you first manually compiled the package, and than add the package to Freetz and try to create an image, with the previous exports still present.[[BR]]A reboot might be the savest option.   


=== References ===

* http://freetz.org/wiki/help/howtos/development/create_gui
* http://www.ip-phone-forum.de/showthread.php?t=90425
